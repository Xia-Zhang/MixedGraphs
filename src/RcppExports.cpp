// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// glmLasso
Rcpp::List glmLasso(const arma::mat& X, const arma::vec& y, const arma::vec& o, const arma::vec& lambda, const std::string family, const uint64_t KLB, const double thresh, const uint64_t maxIter, const uint64_t threads);
RcppExport SEXP MixedGraphs_glmLasso(SEXP XSEXP, SEXP ySEXP, SEXP oSEXP, SEXP lambdaSEXP, SEXP familySEXP, SEXP KLBSEXP, SEXP threshSEXP, SEXP maxIterSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type o(oSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type family(familySEXP);
    Rcpp::traits::input_parameter< const uint64_t >::type KLB(KLBSEXP);
    Rcpp::traits::input_parameter< const double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< const uint64_t >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const uint64_t >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(glmLasso(X, y, o, lambda, family, KLB, thresh, maxIter, threads));
    return rcpp_result_gen;
END_RCPP
}
// glmRidge
Rcpp::List glmRidge(const arma::mat& X, const arma::vec& y, const arma::vec& o, const double& lambda, const std::string family, const double thresh, const uint64_t maxIter);
RcppExport SEXP MixedGraphs_glmRidge(SEXP XSEXP, SEXP ySEXP, SEXP oSEXP, SEXP lambdaSEXP, SEXP familySEXP, SEXP threshSEXP, SEXP maxIterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type o(oSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type family(familySEXP);
    Rcpp::traits::input_parameter< const double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< const uint64_t >::type maxIter(maxIterSEXP);
    rcpp_result_gen = Rcpp::wrap(glmRidge(X, y, o, lambda, family, thresh, maxIter));
    return rcpp_result_gen;
END_RCPP
}
// test
List test(const arma::mat& X, const arma::vec& y, const std::string method, const double lambda);
RcppExport SEXP MixedGraphs_test(SEXP XSEXP, SEXP ySEXP, SEXP methodSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(test(X, y, method, lambda));
    return rcpp_result_gen;
END_RCPP
}
// testADMM
List testADMM(const arma::mat& X, const arma::vec& y, const std::string method, const double lambda);
RcppExport SEXP MixedGraphs_testADMM(SEXP XSEXP, SEXP ySEXP, SEXP methodSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(testADMM(X, y, method, lambda));
    return rcpp_result_gen;
END_RCPP
}
// testNewton
List testNewton(const arma::mat& X, const arma::vec& y, const std::string method, const double lambda);
RcppExport SEXP MixedGraphs_testNewton(SEXP XSEXP, SEXP ySEXP, SEXP methodSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(testNewton(X, y, method, lambda));
    return rcpp_result_gen;
END_RCPP
}
// testBRAIL
List testBRAIL();
RcppExport SEXP MixedGraphs_testBRAIL() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(testBRAIL());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"MixedGraphs_glmLasso", (DL_FUNC) &MixedGraphs_glmLasso, 9},
    {"MixedGraphs_glmRidge", (DL_FUNC) &MixedGraphs_glmRidge, 7},
    {"MixedGraphs_test", (DL_FUNC) &MixedGraphs_test, 4},
    {"MixedGraphs_testADMM", (DL_FUNC) &MixedGraphs_testADMM, 4},
    {"MixedGraphs_testNewton", (DL_FUNC) &MixedGraphs_testNewton, 4},
    {"MixedGraphs_testBRAIL", (DL_FUNC) &MixedGraphs_testBRAIL, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_MixedGraphs(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
